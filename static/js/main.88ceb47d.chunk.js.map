{"version":3,"sources":["components/Card/Card.js","icons/life.svg","icons/dead.svg","icons/living.svg","logic/entities.js","logic/helpers.js","logic/index.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Card","icon","title","description","className","src","alt","width","height","DeadCell","id","dead","LivingCell","living","LifeCell","life","tossCoin","randomFn","Boolean","makePredicateFor","entity","threshold","satisfyTheCondition","list","length","slice","every","defaultRandomFn","Math","floor","random","hasAliveCondition","hasDeadCondition","updateState","state","newCell","result","push","toCellId","cell","idx","map","lastIndexOf","splice","App","mainEl","useRef","useState","cellList","setCellList","useEffect","cardList","current","children","lastElement","scrollIntoView","behavior","ref","props","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAgBeA,MAdf,YAA6C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YAC3B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBAAKC,IAAKJ,EAAMK,IAAKJ,EAAOK,MAAM,KAAKC,OAAO,SAEhD,sBAAKJ,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BF,IAC5B,mBAAGE,UAAU,mBAAb,SAAiCD,W,OCV1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,mCCI5BM,EAAW,CACtBC,GAAI,EACJR,MAAO,6CACPC,YAAa,oGACbF,KAAMU,GAGKC,EAAa,CACxBF,GAAI,EACJR,MAAO,iCACPC,YAAa,iEACbF,KAAMY,GAGKC,EAAW,CACtBJ,GAAI,EACJR,MAAO,iCACPC,YAAa,6BACbF,KAAMc,GCtBKC,EAAW,SAACC,GAAD,OAAcC,QAAQD,IAEjCE,EAAmB,SAACC,GAA2B,IAAnBC,EAAkB,uDAAN,EAC7CC,EAAsB,SAAC,GAAD,SAAGZ,KAAgBU,EAAOV,IACtD,OAAO,SAACa,GAAD,OAAUA,EAAKC,OAASH,GAAaE,EAAKE,OAAOJ,GAAWK,MAAMJ,KCErEK,EAAkBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE3BC,EAAoBZ,EAAiBP,EAJxB,GAKboB,EAAmBb,EAAiBV,EANzB,GAyBTwB,EAjBK,SAACC,GAAuC,IAAhCjB,EAA+B,uDAApBU,EAC/BQ,EAAUnB,EAASC,GAAYL,EAAaH,EAC5C2B,EAAM,sBAAOF,GAAP,CAAcC,IAM1B,GAJIJ,EAAkBK,IACpBA,EAAOC,KAAKvB,GAGVkB,EAAiBI,GAAS,CAC5B,IAAME,EAAW,SAACC,GAAD,OAAUA,EAAK7B,IAC1B8B,EAAMJ,EAAOK,IAAIH,GAAUI,YAAY5B,EAASJ,IACtD8B,GAAO,GAAKJ,EAAOO,OAAOH,EAAK,GAGjC,OAAOJ,GCUMQ,MA3Bf,WACE,IAAMC,EAASC,iBAAO,MADT,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAUb,OALAC,qBAAU,WACR,IAAMC,EAAWN,EAAOO,QAAQC,SAC1BC,EAAcH,EAASA,EAAS3B,OAAS,GAC/C8B,GAAeA,EAAYC,eAAe,CAAEC,SAAU,cAGtD,sBAAKpD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,YAAd,SAhBkB,0HAkBpB,sBAAMA,UAAU,WAAWqD,IAAKZ,EAAhC,SACIG,EAASP,KAZG,SAACiB,EAAOlB,GAAR,OAAgB,cAAC,EAAD,eAAoBkB,GAATlB,QAc3C,wBAAQpC,UAAU,aAAlB,SACE,wBAAQA,UAAU,UAAUuD,QAhBd,kBAAMV,EAAYhB,EAAYe,KAgB5C,SArBgB,4DCMTY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88ceb47d.chunk.js","sourcesContent":["import \"./Card.css\"\n\nfunction Card({ icon, title, description }) {\n  return (\n    <div className=\"Card\">\n      <div className=\"Card-icon\">\n        <img src={icon} alt={title} width=\"40\" height=\"40\" />\n      </div>\n      <div className=\"Card-body\">\n        <h2 className=\"Card-title\">{title}</h2>\n        <p className=\"Card-description\">{description}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/life.90af0a85.svg\";","export default __webpack_public_path__ + \"static/media/dead.c5805396.svg\";","export default __webpack_public_path__ + \"static/media/living.c8acbdfa.svg\";","import life from \"../icons/life.svg\";\nimport dead from \"../icons/dead.svg\";\nimport living from \"../icons/living.svg\";\n\nexport const DeadCell = {\n  id: 1,\n  title: 'Мёртвая',\n  description: 'или прикидывается',\n  icon: dead,\n};\n\nexport const LivingCell = {\n  id: 2,\n  title: 'Живая',\n  description: 'и шевелится!',\n  icon: living,\n};\n\nexport const LifeCell = {\n  id: 3,\n  title: 'Жизнь',\n  description: 'Ку-ку!',\n  icon: life,\n};","export const tossCoin = (randomFn) => Boolean(randomFn);\n\nexport const makePredicateFor = (entity, threshold = 2) => {\n  const satisfyTheCondition = ({ id }) => id === entity.id;\n  return (list) => list.length > threshold && list.slice(-threshold).every(satisfyTheCondition);\n};\n","import { DeadCell, LivingCell, LifeCell } from \"./entities\";\nimport { tossCoin, makePredicateFor } from \"./helpers\";\n\nconst DEAD_CELL_COUNT = 3;\nconst LIVING_CELL_COUNT = 2;\n\nconst defaultRandomFn = Math.floor(Math.random() * 2);\n\nexport const hasAliveCondition = makePredicateFor(LivingCell, LIVING_CELL_COUNT);\nexport const hasDeadCondition = makePredicateFor(DeadCell, DEAD_CELL_COUNT);\n\nconst updateState = (state, randomFn = defaultRandomFn) => {\n  const newCell = tossCoin(randomFn) ? LivingCell : DeadCell;\n  const result = [...state, newCell];\n\n  if (hasAliveCondition(result)) {\n    result.push(LifeCell);\n  }\n\n  if (hasDeadCondition(result)) {\n    const toCellId = (cell) => cell.id;\n    const idx = result.map(toCellId).lastIndexOf(LifeCell.id);\n    idx > -1 && result.splice(idx, 1);\n  }\n\n  return result;\n};\n\nexport default updateState;\n","import './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport Card from \"../Card/Card\";\nimport updateState from '../../logic';\n\nexport const TITLE_TEXT = 'Клеточное наполнение';\nexport const FAB_TEXT = 'Cотворить';\n\nfunction App() {\n  const mainEl = useRef(null);\n  const [cellList, setCellList] = useState([]);\n  const handleClick = () => setCellList(updateState(cellList));\n  const toComponent = (props, idx) => <Card key={idx} {...props}/>;\n  useEffect(() => {\n    const cardList = mainEl.current.children;\n    const lastElement = cardList[cardList.length - 1];\n    lastElement && lastElement.scrollIntoView({ behavior: \"smooth\" });\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">{TITLE_TEXT}</h1>\n      </header>\n      <main className=\"App-main\" ref={mainEl}>\n        { cellList.map(toComponent) }\n      </main>\n      <footer className=\"App-footer\">\n        <button className=\"App-FAB\" onClick={handleClick}>\n          {FAB_TEXT}\n        </button>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}